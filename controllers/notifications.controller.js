const {
  getNotificationsByUserId,
  markAsRead,
  createNotification,
  deleteNotification,
  deleteAllNotificationsForUser,
  getNotificationById
} = require('../models/notifications.model');

// ‚úÖ R√©cup√©rer toutes les notifications d‚Äôun utilisateur
exports.getUserNotifications = async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: 'Utilisateur non authentifi√©' });
    }

    const notifications = await getNotificationsByUserId(userId);
    res.json(notifications);
  } catch (error) {
    console.error('‚ùå Erreur getUserNotifications:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};

// ‚úÖ Marquer une notification comme lue
exports.markNotificationAsRead = async (req, res) => {
  try {
    const userId = req.user?.id;
    const notificationId = req.params.id;

    const notif = await getNotificationById(notificationId);
    if (!notif) return res.status(404).json({ message: 'Notification non trouv√©e' });

    if (notif.userId !== userId) {
      return res.status(403).json({ message: 'Permission refus√©e' });
    }

    await markAsRead(notificationId);
    res.json({ message: 'Notification marqu√©e comme lue' });
  } catch (error) {
    console.error('‚ùå Erreur markNotificationAsRead:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};

// ‚úÖ Cr√©er une notification (userId depuis token, targetRoute optionnel)
exports.createNotification = async (req, res) => {
  try {
    const userId = req.user?.id;
    const { type, title, body, icon } = req.body;
    const targetRoute = typeof req.body?.targetRoute === 'string' ? req.body.targetRoute : null;

    if (!userId || !type || !title || !body || !icon) {
      return res.status(400).json({ message: 'Champs requis manquants' });
    }

    console.log("üß™ Donn√©es re√ßues:", { userId, type, title, body, icon, targetRoute });

    await createNotification(userId, type, title, body, icon, targetRoute);
    res.status(201).json({ message: 'Notification cr√©√©e avec succ√®s' });
  } catch (error) {
    console.error('‚ùå Erreur createNotification:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};

// ‚úÖ Supprimer une notification
exports.deleteNotification = async (req, res) => {
  try {
    const userId = req.user?.id;
    const { id } = req.params;

    const notif = await getNotificationById(id);
    if (!notif) return res.status(404).json({ message: 'Notification non trouv√©e' });

    if (notif.userId !== userId) {
      return res.status(403).json({ message: 'Permission refus√©e' });
    }

    await deleteNotification(id);
    res.json({ message: 'Notification supprim√©e' });
  } catch (error) {
    console.error('‚ùå Erreur deleteNotification:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};

// ‚úÖ Supprimer toutes les notifications d‚Äôun utilisateur
exports.clearAllNotifications = async (req, res) => {
  try {
    const userId = req.user?.id;
    if (!userId) {
      return res.status(401).json({ message: 'Utilisateur non authentifi√©' });
    }

    await deleteAllNotificationsForUser(userId);
    res.json({ message: 'Toutes les notifications supprim√©es' });
  } catch (error) {
    console.error('‚ùå Erreur clearAllNotifications:', error);
    res.status(500).json({ message: 'Erreur serveur', error: error.message });
  }
};
